<style>
  @import url('https://fonts.googleapis.com/css?family=Dosis');

  :root {
    /* generic */
    --gutterSm: 0.4rem;
    --gutterMd: 0.8rem;
    --gutterLg: 1.6rem;
    --gutterXl: 2.4rem;
    --gutterXx: 5.5rem;
    --colorPrimary400: #c9c9c9;
    --colorPrimary600: #958e8e;
    --colorPrimary800: black;
    --fontFamily: "Dosis", sans-serif;
    --fontSizeSm: 1.2rem;
    --fontSizeMd: 1.6rem;
    --fontSizeLg: 2.1rem;
    --fontSizeXl: 2.8rem;
    --fontSizeXx: 3.6rem;
    --lineHeightSm: 1.1;
    --lineHeightMd: 2;
    --transitionDuration: 300ms;
    --transitionTF: cubic-bezier(0.645, 0.045, 0.355, 1);

    /* floated labels */
    --inputPaddingV: var(--gutterMd);
    --inputPaddingH: var(--fontSizeXl);
    --inputFontSize: var(--fontSizeLg);
    --inputLineHeight: var(--lineHeightMd);
    --labelScaleFactor: 0.9;
    --labelDefaultPosY: 100%;
    --labelTransformedPosY: calc((var(--labelDefaultPosY)) - (var(--inputPaddingV) * var(--labelScaleFactor)) - (var(--inputFontSize) * var(--inputLineHeight)));
    --inputTransitionDuration: var(--transitionDuration);
    --inputTransitionTF: var(--transitionTF);
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  .total-money-container {
    background-image: url(../../public/img/bg-3.png);
    background-size: cover;
    background-repeat: no-repeat;
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    width: 100%;
    height: 104vh;
    color: #455A64;
    padding-top: 54px;
  }

  .Wrapper {
    flex: 0 0 80%;
  }

  .Input-container {
    position: relative;
    margin-bottom: 52px;
  }

  .Input-text {
    display: block;
    margin: 0;
    padding: var(--inputPaddingV) var(--inputPaddingH);
    color: inherit;
    width: 80%;
    font-family: inherit;
    font-size: 20px;
    font-weight: inherit;
    line-height: 24px;
    border: none;
    border-radius: 0.4rem;
    transition: box-shadow var(--transitionDuration);
  }

  .Input-text::placeholder {
    color: #B0BEC5;
  }

  .Input-text:focus {
    outline: none;
    box-shadow: 0.2rem 0.8rem 1.6rem var(--colorPrimary600);
  }

  .Input-label {
    display: block;
    position: absolute;
    bottom: 50%;
    left: 1rem;
    color: green;
    font-family: inherit;
    font-size: var(--inputFontSize);
    font-weight: inherit;
    line-height: var(--inputLineHeight);
    opacity: 0;
    transform:
      translate3d(0, var(--labelDefaultPosY), 0) scale(1);
    transform-origin: 0 0;
    transition:
      opacity var(--inputTransitionDuration) var(--inputTransitionTF),
      transform var(--inputTransitionDuration) var(--inputTransitionTF),
      visibility 0ms var(--inputTransitionDuration) var(--inputTransitionTF),
      z-index 0ms var(--inputTransitionDuration) var(--inputTransitionTF);
  }

  .Input-text:placeholder-shown+.Input-label {
    visibility: hidden;
    z-index: -1;
  }

  .Input-text:not(:placeholder-shown)+.Input-label,
  .Input-text:focus:not(:placeholder-shown)+.Input-label {
    visibility: visible;
    z-index: 1;
    opacity: 1;
    transform:
      translate3d(0, var(--labelTransformedPosY), 0) scale(var(--labelScaleFactor));
    transition:
      transform var(--inputTransitionDuration),
      visibility 0ms,
      z-index 0ms;
  }

  /* Định dạng checkbox container */
  .checkbox-container {
    display: block;
    position: relative;
    padding-left: 35px;
    /* Khoảng cách giữa nội dung và checkbox */
    margin-bottom: 12px;
    cursor: pointer;
    font-size: 18px;
    /* Kích thước font cho nội dung checkbox */
  }

  /* Ẩn checkbox mặc định */
  .checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  /* Tạo checkbox tùy chỉnh */
  .checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: #eee;
  }

  /* Khi checkbox được chọn, thay đổi màu của checkmark */
  .checkbox-container input:checked~.checkmark {
    background-color: green;
  }

  /* Tạo ký hiệu checkmark */
  .checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }

  /* Hiển thị ký hiệu checkmark khi checkbox được chọn */
  .checkbox-container input:checked~.checkmark:after {
    display: block;
  }

  h1 {
  margin: 0px 8px 60px 4px;
  }

  /* Định dạng ký hiệu checkmark */
  .checkbox-container .checkmark:after {
    left: 11px;
    top: 8px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    transform: rotate(45deg);
  }

  .Login_button {
    width: 80%;
    margin-top: 2.5rem;
    display: flex;
    justify-content: center;
  }

  .Login_button .login_btn {
    width: 6rem;
    height: 6rem;
    border-radius: 30%;
    color: #e8e8e8;
    background: white;
    border: 0;
    font-size: 3rem;
  }

  .Login_button .login_btn:hover {
    background-color: #60aa82;
    color: white;
    cursor: pointer;
  }
</style>

<div class="total-money-container">
  <h1 style="color: #60aa82;">AUTO PLANNING</h1>
  <form class="Wrapper" action="/functions/auto-planning" method="post">
    <div class="Input-container">
      <input type="text" id="input" class="Input-text" placeholder="Total money" name="totalMoney" aria-describedby="totalMoneyHelp" id="totalMoney" oninput="formatCurrency(this)" style="border: 1px solid black;">
      <label for="input" class="Input-label">Total money</label>
      <small id="totalMoneyHelp" class="form-text text-muted">Your total income within a month.</small>
    </div>

    <div class="Input-container">
      <input type="text" id="input" class="Input-text" placeholder="Expenses" name="expenses" aria-describedby="enpensesHelp" id="expenses" oninput="formatCurrency(this)" style="border: 1px solid black;">
      <label for="input" class="Input-label">Expenses</label>
      <small id="enpensesHelp" class="form-text text-muted">Total fixed costs such as rent, electricity, water,...</small>
    </div>

    <div class="Input-container">
      <input type="text" id="input" class="Input-text" placeholder="Saving" name="saving" id="saving" oninput="formatCurrency(this)" style="border: 1px solid black;">
      <label for="input" class="Input-label">Saving</label>
    </div>

    <div class="spending-categories">
      <h3>Spending categories:</h3>
      <label class="checkbox-container">
        Food
        <input type="checkbox" name="food">
        <span class="checkmark"></span>
      </label>
      <label class="checkbox-container">
        Clothes
        <input type="checkbox" name="clothes">
        <span class="checkmark"></span>
      </label>
      <label class="checkbox-container">
        Education
        <input type="checkbox" name="education">
        <span class="checkmark"></span>
      </label>
      <label class="checkbox-container">
        Invest
        <input type="checkbox" name="invest">
        <span class="checkmark"></span>
      </label>
      <label class="checkbox-container">
        Entertainment
        <input type="checkbox" name="entertainment">
        <span class="checkmark"></span>
      </label>
      <div class="Login_button">
        <button type="submit" class="login_btn">
          <i class="fas fa-arrow-right"></i>
        </button>
      </div>
    </div>

  </form>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    formatCurrency(document.getElementById("amount"));
  });

  function formatCurrency(input) {
    // Get input value
    let value = input.value;

    // Remove non-numeric characters
    value = value.replace(/[^0-9.]/g, '');

    // Format with commas for thousands separator
    value = numberWithCommas(value);

    // Set formatted value back to input
    input.value = value;
  }

  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
</script>